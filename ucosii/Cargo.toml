[workspace.package]
version = "0.1.0"
authors = ["liam","noah"]
edition = "2021"
repository = "https://github.com/KMSorSMS/embassy_preempt"
license = "MIT OR Apache-2.0"

[package]
name = "ucosii"
version.workspace = true
authors.workspace = true
edition.workspace = true
repository.workspace = true
license.workspace = true
readme = "README.md"

[workspace]
members = ["stream"]

[workspace.dependencies.ucosii-stream]
version = "0.1.0"
path = "stream"

[workspace.dependencies]

[dependencies]
cortex-m = { version = "0.7.6", optional = true }
critical-section = "1.1"
defmt = { version = "0.3", optional = true }
log = { version = "0.4.14", optional = true }
ucosii-stream.workspace = true
spin = "0.5.2"
linked_list_allocator = "0.9.0"
embassy-executor = { version = "0.5.0", path = "../embassy-executor", features = ["task-arena-size-32768", "arch-cortex-m", "executor-thread", "executor-interrupt", "defmt", "integrated-timers"] }

# futures = { version = "0.3.24", default-features = false, features = ["alloc", "async-await"] }
# use lazy static to define global variables
# lazy_static = "1.4.0"

# this part only define features, don't decide whether the feature is active
[features]
default = ["defmt", "OS_MEM_EN", "OS_PRIO_LESS_THAN_64", "OS_ARG_CHK_EN","OS_TIME_GET_SET_EN","OS_TASK_CREATE_EXT_EN"]
nightly = []
# this feature will be set in build.rs
OS_EVENT_EN = []
# this feature will be set in build.rs
OS_EVENT_NAME_EN = []
OS_SCHED_LOCK_EN = []
OS_TASK_DEL_EN = []
OS_PRIO_LESS_THAN_64 = []
OS_PRIO_LESS_THAN_256 = []
OS_MEM_EN = []
OS_MAX_MEM_PART_EN = []
OS_MBOX_EN = []
OS_TASK_STAT_EN = []
OS_MEM_NAME_EN = []
OS_MUTEX_EN = []
OS_Q_EN = []
OS_SEM_EN = []
OS_TASK_CREATE_EXT_EN = []
OS_TASK_PROFILE_EN = []
OS_TASK_NAME_EN = []
OS_SAFETY_CRITICAL = []
OS_ARG_CHK_EN = []
OS_MAX_QS = []
OS_TASK_REG_TBL_SIZE = []
OS_TASK_STAT_STK_CHK_EN = []
OS_MAX_MEM_PART=[]
OS_FLAG_EN=[]
OS_MAX_FLAGS=[]
OS_TMR_EN=[]
OS_CPU_HOOKS_EN=[]
OS_DEBUG_EN=[]
OS_TIME_GET_SET_EN=[]
std = []
host = []
atomics = []                 # use hardware atomics from core::sync::atomic
xip = []                     # enable optimizations for execute in place
[target.'cfg(loom)'.dependencies]
loom = { version = "0.7", features = ["checkpoint"] }
[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
