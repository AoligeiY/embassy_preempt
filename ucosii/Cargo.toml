[workspace.package]
version = "0.1.0"
authors = ["liam","noah"]
edition = "2021"
repository = "https://github.com/KMSorSMS/embassy_preempt"
license = "MIT OR Apache-2.0"

[package]
name = "ucosii"
version.workspace = true
authors.workspace = true
edition.workspace = true
repository.workspace = true
license.workspace = true
readme = "README.md"


[lib]
harness = false

# needed for each integration test
[[test]]
name = "integration"
harness = false

[workspace]
members = []

# [workspace.dependencies.ucosii-executor-macro]
# version = "0.1.0"
# path = "executor-macro"

[workspace.dependencies]

[dependencies]
cortex-m = { version = "0.7"}
cortex-m-rt = {version = "0.7"} 
critical-section = { version = "1.1",features=["restore-state-bool"]}
defmt = {version = "0.3", optional = true}
defmt-rtt = "0.4"
log = { version = "0.4.14", optional = true }
spin = "0.5.2"
linked_list_allocator = "0.9.0"
lazy_static = {version = "1.5.0", features = ["spin_no_std"]}
panic-probe = { version = "0.3", features = ["print-defmt"] }
cortex-m-semihosting = "0.5.0"
stm32-metapac = { git = "https://github.com/embassy-rs/stm32-data-generated", tag = "stm32-data-e0cfd165fd8fffaa0df66a35eeca83b228496645",  features = ["metadata", "rt"] }

[build-dependencies]
proc-macro2 = "1.0.36"
quote = "1.0.15"

#stm32-metapac = { version = "15", default-features = false, features = ["metadata"]}
# stm32-metapac = { git = "https://github.com/embassy-rs/stm32-data-generated", tag = "stm32-data-e0cfd165fd8fffaa0df66a35eeca83b228496645",  features = ["metadata", "stm32f401re"] }


[dev-dependencies]
defmt-test = "0.3"

# cargo build/run
[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 1         # <-
overflow-checks = true  # <-

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 2           # <-
overflow-checks = true  # <-

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3            # <-
overflow-checks = false  # <-

# cargo build --release
[profile.release]
codegen-units = 1
debug = 2  # 生成完整的调试信息
opt-level = 1  # 优化级别
lto = true

# futures = { version = "0.3.24", default-features = false, features = ["alloc", "async-await"] }
# use lazy static to define global variables
# lazy_static = "1.4.0"

# this part only define features, don't decide whether the feature is active
[features]
# when a feature is set in default, it is active
default = ["unstable-pac","stm32f401re","time_driver_tim3","OS_STACK_LESS_THAN_64","cortex_m","defmt","OS_MEM_EN", "OS_PRIO_LESS_THAN_64", "OS_ARG_CHK_EN","OS_TIME_GET_SET_EN","OS_TASK_CREATE_EXT_EN","OS_TASK_REG_TBL_SIZE"]
defmt = ["dep:defmt"]
nightly = []
# this feature will be set in build.rs
OS_EVENT_EN = []
# this feature will be set in build.rs
OS_EVENT_NAME_EN = []
OS_SCHED_LOCK_EN = []
OS_TASK_DEL_EN = []
OS_PRIO_LESS_THAN_64 = []
OS_PRIO_LESS_THAN_256 = []
OS_MEM_EN = []
OS_MAX_MEM_PART_EN = []
OS_MBOX_EN = []
OS_TASK_STAT_EN = []
OS_MEM_NAME_EN = []
OS_MUTEX_EN = []
OS_Q_EN = []
OS_SEM_EN = []
OS_TASK_CREATE_EXT_EN = []
OS_TASK_PROFILE_EN = []
OS_TASK_NAME_EN = []
OS_SAFETY_CRITICAL = []
OS_ARG_CHK_EN = []
OS_MAX_QS = []
OS_TASK_REG_TBL_SIZE = []
OS_TASK_STAT_STK_CHK_EN = []
OS_MAX_MEM_PART=[]
OS_FLAG_EN=[]
OS_MAX_FLAGS=[]
OS_TMR_EN=[]
OS_CPU_HOOKS_EN=[]
OS_DEBUG_EN=[]
OS_TIME_GET_SET_EN=[]
OS_SAFETY_CRITICAL_IEC61508=[]
cortex_m = []
OS_STACK_LESS_THAN_64=[]
OS_STACK_LESS_THAN_256=[]
OS_EVENT_MULTI_EN=[]
std = []
host = []
atomics = []                 # use hardware atomics from core::sync::atomic
xip = []                     # enable optimizations for execute in place
time_driver_tim1=[]
time_driver_tim2=[]
time_driver_tim3=[]
time_driver_tim4=[]
time_driver_tim5=[]
time_driver_tim8=[]
time_driver_tim9=[]
time_driver_tim12=[]
time_driver_tim15=[]
time_driver_tim20=[]
time_driver_tim21=[]
time_driver_tim22=[]
time_driver_tim23=[]
time_driver_tim24=[]
stm32f401re = [ "stm32-metapac/stm32f401re" ]
low-power=[]
## Re-export stm32-metapac at `embassy_stm32::pac`.
## This is unstable because semver-minor (non-breaking) releases of embassy-stm32 may major-bump (breaking) the stm32-metapac version.
## If this is an issue for you, you're encouraged to directly depend on a fixed version of the PAC.
## There are no plans to make this stable.
unstable-pac = []
# unstable-pac=[]
[target.'cfg(loom)'.dependencies]
loom = { version = "0.7", features = ["checkpoint"] }
[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }